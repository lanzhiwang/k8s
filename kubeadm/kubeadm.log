[init] Using Kubernetes version: v1.14.5
[preflight] Running pre-flight checks
[preflight] Would pull the required images (like 'kubeadm config images pull')
[kubelet-start] Writing kubelet environment file with flags to file "/tmp/kubeadm-init-dryrun301362558/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/tmp/kubeadm-init-dryrun301362558/config.yaml"
[certs] Using certificateDir folder "/tmp/kubeadm-init-dryrun301362558"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [huzhi-code kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.8.10]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [huzhi-code localhost] and IPs [10.0.8.10 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [huzhi-code localhost] and IPs [10.0.8.10 127.0.0.1 ::1]
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/tmp/kubeadm-init-dryrun301362558"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/tmp/kubeadm-init-dryrun301362558"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[dryrun] Would ensure that "/var/lib/etcd" directory is present
[etcd] Creating static Pod manifest for local etcd in "/tmp/kubeadm-init-dryrun301362558"
[dryrun] Wrote certificates, kubeconfig files and control plane manifests to the "/tmp/kubeadm-init-dryrun301362558" directory
[dryrun] The certificates or kubeconfig files would not be printed due to their sensitive nature
[dryrun] Please examine the "/tmp/kubeadm-init-dryrun301362558" directory for details about what would be written
[dryrun] Would write file "/etc/kubernetes/manifests/kube-apiserver.yaml" with content:
	apiVersion: v1
	kind: Pod
	metadata:
	  creationTimestamp: null
	  labels:
	    component: kube-apiserver
	    tier: control-plane
	  name: kube-apiserver
	  namespace: kube-system
	spec:
	  containers:
	  - command:
	    - kube-apiserver
	    - --advertise-address=10.0.8.10
	    - --allow-privileged=true
	    - --authorization-mode=Node,RBAC
	    - --client-ca-file=/etc/kubernetes/pki/ca.crt
	    - --enable-admission-plugins=NodeRestriction
	    - --enable-bootstrap-token-auth=true
	    - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
	    - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
	    - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
	    - --etcd-servers=https://127.0.0.1:2379
	    - --insecure-port=0
	    - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
	    - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
	    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
	    - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
	    - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
	    - --requestheader-allowed-names=front-proxy-client
	    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
	    - --requestheader-extra-headers-prefix=X-Remote-Extra-
	    - --requestheader-group-headers=X-Remote-Group
	    - --requestheader-username-headers=X-Remote-User
	    - --secure-port=6443
	    - --service-account-key-file=/etc/kubernetes/pki/sa.pub
	    - --service-cluster-ip-range=10.96.0.0/12
	    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
	    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
	    image: k8s.gcr.io/kube-apiserver:v1.14.5
	    imagePullPolicy: IfNotPresent
	    livenessProbe:
	      failureThreshold: 8
	      httpGet:
	        host: 10.0.8.10
	        path: /healthz
	        port: 6443
	        scheme: HTTPS
	      initialDelaySeconds: 15
	      timeoutSeconds: 15
	    name: kube-apiserver
	    resources:
	      requests:
	        cpu: 250m
	    volumeMounts:
	    - mountPath: /etc/ssl/certs
	      name: ca-certs
	      readOnly: true
	    - mountPath: /etc/pki
	      name: etc-pki
	      readOnly: true
	    - mountPath: /etc/kubernetes/pki
	      name: k8s-certs
	      readOnly: true
	  hostNetwork: true
	  priorityClassName: system-cluster-critical
	  volumes:
	  - hostPath:
	      path: /etc/ssl/certs
	      type: DirectoryOrCreate
	    name: ca-certs
	  - hostPath:
	      path: /etc/pki
	      type: DirectoryOrCreate
	    name: etc-pki
	  - hostPath:
	      path: /etc/kubernetes/pki
	      type: DirectoryOrCreate
	    name: k8s-certs
	status: {}
[dryrun] Would write file "/etc/kubernetes/manifests/kube-controller-manager.yaml" with content:
	apiVersion: v1
	kind: Pod
	metadata:
	  creationTimestamp: null
	  labels:
	    component: kube-controller-manager
	    tier: control-plane
	  name: kube-controller-manager
	  namespace: kube-system
	spec:
	  containers:
	  - command:
	    - kube-controller-manager
	    - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
	    - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
	    - --bind-address=127.0.0.1
	    - --client-ca-file=/etc/kubernetes/pki/ca.crt
	    - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
	    - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
	    - --controllers=*,bootstrapsigner,tokencleaner
	    - --kubeconfig=/etc/kubernetes/controller-manager.conf
	    - --leader-elect=true
	    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
	    - --root-ca-file=/etc/kubernetes/pki/ca.crt
	    - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
	    - --use-service-account-credentials=true
	    image: k8s.gcr.io/kube-controller-manager:v1.14.5
	    imagePullPolicy: IfNotPresent
	    livenessProbe:
	      failureThreshold: 8
	      httpGet:
	        host: 127.0.0.1
	        path: /healthz
	        port: 10252
	        scheme: HTTP
	      initialDelaySeconds: 15
	      timeoutSeconds: 15
	    name: kube-controller-manager
	    resources:
	      requests:
	        cpu: 200m
	    volumeMounts:
	    - mountPath: /etc/ssl/certs
	      name: ca-certs
	      readOnly: true
	    - mountPath: /etc/pki
	      name: etc-pki
	      readOnly: true
	    - mountPath: /etc/kubernetes/pki
	      name: k8s-certs
	      readOnly: true
	    - mountPath: /etc/kubernetes/controller-manager.conf
	      name: kubeconfig
	      readOnly: true
	  hostNetwork: true
	  priorityClassName: system-cluster-critical
	  volumes:
	  - hostPath:
	      path: /etc/ssl/certs
	      type: DirectoryOrCreate
	    name: ca-certs
	  - hostPath:
	      path: /etc/pki
	      type: DirectoryOrCreate
	    name: etc-pki
	  - hostPath:
	      path: /etc/kubernetes/pki
	      type: DirectoryOrCreate
	    name: k8s-certs
	  - hostPath:
	      path: /etc/kubernetes/controller-manager.conf
	      type: FileOrCreate
	    name: kubeconfig
	status: {}
[dryrun] Would write file "/etc/kubernetes/manifests/kube-scheduler.yaml" with content:
	apiVersion: v1
	kind: Pod
	metadata:
	  creationTimestamp: null
	  labels:
	    component: kube-scheduler
	    tier: control-plane
	  name: kube-scheduler
	  namespace: kube-system
	spec:
	  containers:
	  - command:
	    - kube-scheduler
	    - --bind-address=127.0.0.1
	    - --kubeconfig=/etc/kubernetes/scheduler.conf
	    - --leader-elect=true
	    image: k8s.gcr.io/kube-scheduler:v1.14.5
	    imagePullPolicy: IfNotPresent
	    livenessProbe:
	      failureThreshold: 8
	      httpGet:
	        host: 127.0.0.1
	        path: /healthz
	        port: 10251
	        scheme: HTTP
	      initialDelaySeconds: 15
	      timeoutSeconds: 15
	    name: kube-scheduler
	    resources:
	      requests:
	        cpu: 100m
	    volumeMounts:
	    - mountPath: /etc/kubernetes/scheduler.conf
	      name: kubeconfig
	      readOnly: true
	  hostNetwork: true
	  priorityClassName: system-cluster-critical
	  volumes:
	  - hostPath:
	      path: /etc/kubernetes/scheduler.conf
	      type: FileOrCreate
	    name: kubeconfig
	status: {}
[dryrun] Would write file "/var/lib/kubelet/config.yaml" with content:
	address: 0.0.0.0
	apiVersion: kubelet.config.k8s.io/v1beta1
	authentication:
	  anonymous:
	    enabled: false
	  webhook:
	    cacheTTL: 2m0s
	    enabled: true
	  x509:
	    clientCAFile: /etc/kubernetes/pki/ca.crt
	authorization:
	  mode: Webhook
	  webhook:
	    cacheAuthorizedTTL: 5m0s
	    cacheUnauthorizedTTL: 30s
	cgroupDriver: cgroupfs
	cgroupsPerQOS: true
	clusterDNS:
	- 10.96.0.10
	clusterDomain: cluster.local
	configMapAndSecretChangeDetectionStrategy: Watch
	containerLogMaxFiles: 5
	containerLogMaxSize: 10Mi
	contentType: application/vnd.kubernetes.protobuf
	cpuCFSQuota: true
	cpuCFSQuotaPeriod: 100ms
	cpuManagerPolicy: none
	cpuManagerReconcilePeriod: 10s
	enableControllerAttachDetach: true
	enableDebuggingHandlers: true
	enforceNodeAllocatable:
	- pods
	eventBurst: 10
	eventRecordQPS: 5
	evictionHard:
	  imagefs.available: 15%
	  memory.available: 100Mi
	  nodefs.available: 10%
	  nodefs.inodesFree: 5%
	evictionPressureTransitionPeriod: 5m0s
	failSwapOn: true
	fileCheckFrequency: 20s
	hairpinMode: promiscuous-bridge
	healthzBindAddress: 127.0.0.1
	healthzPort: 10248
	httpCheckFrequency: 20s
	imageGCHighThresholdPercent: 85
	imageGCLowThresholdPercent: 80
	imageMinimumGCAge: 2m0s
	iptablesDropBit: 15
	iptablesMasqueradeBit: 14
	kind: KubeletConfiguration
	kubeAPIBurst: 10
	kubeAPIQPS: 5
	makeIPTablesUtilChains: true
	maxOpenFiles: 1000000
	maxPods: 110
	nodeLeaseDurationSeconds: 40
	nodeStatusReportFrequency: 1m0s
	nodeStatusUpdateFrequency: 10s
	oomScoreAdj: -999
	podPidsLimit: -1
	port: 10250
	registryBurst: 10
	registryPullQPS: 5
	resolvConf: /etc/resolv.conf
	rotateCertificates: true
	runtimeRequestTimeout: 2m0s
	serializeImagePulls: true
	staticPodPath: /etc/kubernetes/manifests
	streamingConnectionIdleTimeout: 4h0m0s
	syncFrequency: 1m0s
	volumeStatsAggPeriod: 1m0s
[dryrun] Would write file "/var/lib/kubelet/kubeadm-flags.env" with content:
	KUBELET_KUBEADM_ARGS=--cgroup-driver=cgroupfs --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.1
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/tmp/kubeadm-init-dryrun301362558". This can take up to 4m0s
[upload-config] storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[dryrun] Would perform action GET on resource "configmaps" in API group "core/v1"
[dryrun] Resource name: "kubeadm-config"
[dryrun] Would perform action CREATE on resource "configmaps" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	data:
	  ClusterConfiguration: |
	    apiServer:
	      extraArgs:
	        authorization-mode: Node,RBAC
	      timeoutForControlPlane: 4m0s
	    apiVersion: kubeadm.k8s.io/v1beta1
	    certificatesDir: /etc/kubernetes/pki
	    clusterName: kubernetes
	    controlPlaneEndpoint: ""
	    controllerManager: {}
	    dns:
	      type: CoreDNS
	    etcd:
	      local:
	        dataDir: /var/lib/etcd
	    imageRepository: k8s.gcr.io
	    kind: ClusterConfiguration
	    kubernetesVersion: v1.14.5
	    networking:
	      dnsDomain: cluster.local
	      podSubnet: ""
	      serviceSubnet: 10.96.0.0/12
	    scheduler: {}
	  ClusterStatus: |
	    apiEndpoints:
	      huzhi-code:
	        advertiseAddress: 10.0.8.10
	        bindPort: 6443
	    apiVersion: kubeadm.k8s.io/v1beta1
	    kind: ClusterStatus
	kind: ConfigMap
	metadata:
	  creationTimestamp: null
	  name: kubeadm-config
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "roles" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: Role
	metadata:
	  creationTimestamp: null
	  name: kubeadm:nodes-kubeadm-config
	  namespace: kube-system
	rules:
	- apiGroups:
	  - ""
	  resourceNames:
	  - kubeadm-config
	  resources:
	  - configmaps
	  verbs:
	  - get
[dryrun] Would perform action CREATE on resource "rolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: RoleBinding
	metadata:
	  creationTimestamp: null
	  name: kubeadm:nodes-kubeadm-config
	  namespace: kube-system
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: Role
	  name: kubeadm:nodes-kubeadm-config
	subjects:
	- kind: Group
	  name: system:bootstrappers:kubeadm:default-node-token
	- kind: Group
	  name: system:nodes
[kubelet] Creating a ConfigMap "kubelet-config-1.14" in namespace kube-system with the configuration for the kubelets in the cluster
[dryrun] Would perform action CREATE on resource "configmaps" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	data:
	  kubelet: |
	    address: 0.0.0.0
	    apiVersion: kubelet.config.k8s.io/v1beta1
	    authentication:
	      anonymous:
	        enabled: false
	      webhook:
	        cacheTTL: 2m0s
	        enabled: true
	      x509:
	        clientCAFile: /etc/kubernetes/pki/ca.crt
	    authorization:
	      mode: Webhook
	      webhook:
	        cacheAuthorizedTTL: 5m0s
	        cacheUnauthorizedTTL: 30s
	    cgroupDriver: cgroupfs
	    cgroupsPerQOS: true
	    clusterDNS:
	    - 10.96.0.10
	    clusterDomain: cluster.local
	    configMapAndSecretChangeDetectionStrategy: Watch
	    containerLogMaxFiles: 5
	    containerLogMaxSize: 10Mi
	    contentType: application/vnd.kubernetes.protobuf
	    cpuCFSQuota: true
	    cpuCFSQuotaPeriod: 100ms
	    cpuManagerPolicy: none
	    cpuManagerReconcilePeriod: 10s
	    enableControllerAttachDetach: true
	    enableDebuggingHandlers: true
	    enforceNodeAllocatable:
	    - pods
	    eventBurst: 10
	    eventRecordQPS: 5
	    evictionHard:
	      imagefs.available: 15%
	      memory.available: 100Mi
	      nodefs.available: 10%
	      nodefs.inodesFree: 5%
	    evictionPressureTransitionPeriod: 5m0s
	    failSwapOn: true
	    fileCheckFrequency: 20s
	    hairpinMode: promiscuous-bridge
	    healthzBindAddress: 127.0.0.1
	    healthzPort: 10248
	    httpCheckFrequency: 20s
	    imageGCHighThresholdPercent: 85
	    imageGCLowThresholdPercent: 80
	    imageMinimumGCAge: 2m0s
	    iptablesDropBit: 15
	    iptablesMasqueradeBit: 14
	    kind: KubeletConfiguration
	    kubeAPIBurst: 10
	    kubeAPIQPS: 5
	    makeIPTablesUtilChains: true
	    maxOpenFiles: 1000000
	    maxPods: 110
	    nodeLeaseDurationSeconds: 40
	    nodeStatusReportFrequency: 1m0s
	    nodeStatusUpdateFrequency: 10s
	    oomScoreAdj: -999
	    podPidsLimit: -1
	    port: 10250
	    registryBurst: 10
	    registryPullQPS: 5
	    resolvConf: /etc/resolv.conf
	    rotateCertificates: true
	    runtimeRequestTimeout: 2m0s
	    serializeImagePulls: true
	    staticPodPath: /etc/kubernetes/manifests
	    streamingConnectionIdleTimeout: 4h0m0s
	    syncFrequency: 1m0s
	    volumeStatsAggPeriod: 1m0s
	kind: ConfigMap
	metadata:
	  creationTimestamp: null
	  name: kubelet-config-1.14
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "roles" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: Role
	metadata:
	  creationTimestamp: null
	  name: kubeadm:kubelet-config-1.14
	  namespace: kube-system
	rules:
	- apiGroups:
	  - ""
	  resourceNames:
	  - kubelet-config-1.14
	  resources:
	  - configmaps
	  verbs:
	  - get
[dryrun] Would perform action CREATE on resource "rolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: RoleBinding
	metadata:
	  creationTimestamp: null
	  name: kubeadm:kubelet-config-1.14
	  namespace: kube-system
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: Role
	  name: kubeadm:kubelet-config-1.14
	subjects:
	- kind: Group
	  name: system:nodes
	- kind: Group
	  name: system:bootstrappers:kubeadm:default-node-token
[dryrun] Would perform action GET on resource "nodes" in API group "core/v1"
[dryrun] Resource name: "huzhi-code"
[dryrun] Would perform action PATCH on resource "nodes" in API group "core/v1"
[dryrun] Resource name: "huzhi-code"
[dryrun] Attached patch:
	{"metadata":{"annotations":{"kubeadm.alpha.kubernetes.io/cri-socket":"/var/run/dockershim.sock"}}}
[upload-certs] Skipping phase. Please see --experimental-upload-certs
[mark-control-plane] Marking the node huzhi-code as control-plane by adding the label "node-role.kubernetes.io/master=''"
[mark-control-plane] Marking the node huzhi-code as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[dryrun] Would perform action GET on resource "nodes" in API group "core/v1"
[dryrun] Resource name: "huzhi-code"
[dryrun] Would perform action PATCH on resource "nodes" in API group "core/v1"
[dryrun] Resource name: "huzhi-code"
[dryrun] Attached patch:
	{"metadata":{"labels":{"node-role.kubernetes.io/master":""}},"spec":{"taints":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}]}}
[bootstrap-token] Using token: krzl1u.yf9w1olz2hqas0t6
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[dryrun] Would perform action GET on resource "secrets" in API group "core/v1"
[dryrun] Resource name: "bootstrap-token-krzl1u"
[dryrun] Would perform action CREATE on resource "secrets" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	data:
	  auth-extra-groups: c3lzdGVtOmJvb3RzdHJhcHBlcnM6a3ViZWFkbTpkZWZhdWx0LW5vZGUtdG9rZW4=
	  description: VGhlIGRlZmF1bHQgYm9vdHN0cmFwIHRva2VuIGdlbmVyYXRlZCBieSAna3ViZWFkbSBpbml0Jy4=
	  expiration: MjAxOS0wOC0wOVQxODowMjo1MSswODowMA==
	  token-id: a3J6bDF1
	  token-secret: eWY5dzFvbHoyaHFhczB0Ng==
	  usage-bootstrap-authentication: dHJ1ZQ==
	  usage-bootstrap-signing: dHJ1ZQ==
	kind: Secret
	metadata:
	  creationTimestamp: null
	  name: bootstrap-token-krzl1u
	  namespace: kube-system
	type: bootstrap.kubernetes.io/token
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[dryrun] Would perform action CREATE on resource "clusterrolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRoleBinding
	metadata:
	  creationTimestamp: null
	  name: kubeadm:kubelet-bootstrap
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: ClusterRole
	  name: system:node-bootstrapper
	subjects:
	- kind: Group
	  name: system:bootstrappers:kubeadm:default-node-token
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[dryrun] Would perform action CREATE on resource "clusterrolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRoleBinding
	metadata:
	  creationTimestamp: null
	  name: kubeadm:node-autoapprove-bootstrap
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: ClusterRole
	  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
	subjects:
	- kind: Group
	  name: system:bootstrappers:kubeadm:default-node-token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[dryrun] Would perform action CREATE on resource "clusterrolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRoleBinding
	metadata:
	  creationTimestamp: null
	  name: kubeadm:node-autoapprove-certificate-rotation
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: ClusterRole
	  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient
	subjects:
	- kind: Group
	  name: system:nodes
[bootstrap-token] creating the "cluster-info" ConfigMap in the "kube-public" namespace
[dryrun] Would perform action CREATE on resource "configmaps" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	data:
	  kubeconfig: |
	    apiVersion: v1
	    clusters:
	    - cluster:
	        certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFNU1EZ3dPREV3TURJME5Wb1hEVEk1TURnd05URXdNREkwTlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTm5JCnhRWnc1NTY4SjBuQ2wzQkRhUE9ucHhzMlU3L0tFNFgyWnlxV1Vid2sydGRuTFJmbXpLRktYTHFHbDVLUWFNZ0wKdm5qeG9OekVsWkFnenh0ck9aajRkRWRQNGh4THVOMnFSRXlRZ3J2WnQyY0hXSkwyY0U0bFBldkVwUm4wL2F2dgpGaFR1Ym11MGJDTUpYTEx6T1hlNHRyUFpmK3hwVkdDYytRY2RNVDcvV0ZJYUdkcDMyV0loTjJrVnZvcjN2aEk1CjNTL2RtL0hMdmtxdERKQ2pRdjYxMmMyU3huUWViY0xWSkR3RlRvNmY4V3MvUnZySEpVQ1lpa3piKys3OHh4ZEQKZ3NFM2lwcmI3UGZPcjJMQUJMWTM2dnNBWXQwSVBXUmRCaVZYcG5BL2E4OXBYeG5HQ1JSbUEwQXdLdTR4Y2hMbAo1cGxqb3VURm90Tkx6eGN4Mmw4Q0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJNS8wWktva0VKdkZ2TG9rcmk1VGY1N3MvZE8KejlkQlNISXV4NWwrcHZlUEE5T1FVNUNJbTVOOXN6WGVNL2hTbGlybi9MRnhXVEhhWmtqQUd3RlE5ZmlNSE5qSQpEV3ExNU1MUFhVckRIYlpaVjhLTTJpWUQwNkxGTEM1WnliR2o1L2RPWm9KMVYxZnFpM0FzLzJiV2tDYThOaWVPClBXajExM1BrUW1hY3hCYWtKQ0xMeUZqYmVqSTZmMUZvcWhldCt3M3IyQmMxVlJnN1pERDRlZ1lNRkhYTW0zc0QKU0ZFOVZ2NkpsTEpBQXRSU0pvdWs5UEZpWnNDWmVTdlRLYjhUUXVISkUzbFdacEV3U3pUMzQwdWZHc1dBZitpZwpFMjFOOFlicDVwMVA2azRZMDl3Smt1WnVwYVkwbjJpUHJ6b21xeEd0TDB6QWNQVTFURjM4dWRJcHFaaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
	        server: https://10.0.8.10:6443
	      name: ""
	    contexts: []
	    current-context: ""
	    kind: Config
	    preferences: {}
	    users: []
	kind: ConfigMap
	metadata:
	  creationTimestamp: null
	  name: cluster-info
	  namespace: kube-public
[dryrun] Would perform action CREATE on resource "roles" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: Role
	metadata:
	  creationTimestamp: null
	  name: kubeadm:bootstrap-signer-clusterinfo
	  namespace: kube-public
	rules:
	- apiGroups:
	  - ""
	  resourceNames:
	  - cluster-info
	  resources:
	  - configmaps
	  verbs:
	  - get
[dryrun] Would perform action CREATE on resource "rolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: RoleBinding
	metadata:
	  creationTimestamp: null
	  name: kubeadm:bootstrap-signer-clusterinfo
	  namespace: kube-public
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: Role
	  name: kubeadm:bootstrap-signer-clusterinfo
	subjects:
	- kind: User
	  name: system:anonymous
[dryrun] Would perform action GET on resource "configmaps" in API group "core/v1"
[dryrun] Resource name: "kube-dns"
[dryrun] Would perform action GET on resource "configmaps" in API group "core/v1"
[dryrun] Resource name: "coredns"
[dryrun] Would perform action CREATE on resource "configmaps" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	data:
	  Corefile: ".:53 {\n    errors\n    health\n    kubernetes cluster.local in-addr.arpa
	    ip6.arpa {\n       pods insecure\n       upstream\n       fallthrough in-addr.arpa
	    ip6.arpa\n    }\n    prometheus :9153\n    forward . \n    cache 30\n    loop\n
	    \   reload\n    loadbalance\n}\n"
	kind: ConfigMap
	metadata:
	  creationTimestamp: null
	  name: coredns
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "clusterroles" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRole
	metadata:
	  creationTimestamp: null
	  name: system:coredns
	rules:
	- apiGroups:
	  - ""
	  resources:
	  - endpoints
	  - services
	  - pods
	  - namespaces
	  verbs:
	  - list
	  - watch
	- apiGroups:
	  - ""
	  resources:
	  - nodes
	  verbs:
	  - get
[dryrun] Would perform action CREATE on resource "clusterrolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRoleBinding
	metadata:
	  creationTimestamp: null
	  name: system:coredns
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: ClusterRole
	  name: system:coredns
	subjects:
	- kind: ServiceAccount
	  name: coredns
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "serviceaccounts" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	kind: ServiceAccount
	metadata:
	  creationTimestamp: null
	  name: coredns
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "deployments" in API group "apps/v1"
[dryrun] Attached object:
	apiVersion: apps/v1
	kind: Deployment
	metadata:
	  creationTimestamp: null
	  labels:
	    k8s-app: kube-dns
	  name: coredns
	  namespace: kube-system
	spec:
	  replicas: 2
	  selector:
	    matchLabels:
	      k8s-app: kube-dns
	  strategy:
	    rollingUpdate:
	      maxUnavailable: 1
	    type: RollingUpdate
	  template:
	    metadata:
	      creationTimestamp: null
	      labels:
	        k8s-app: kube-dns
	    spec:
	      containers:
	      - args:
	        - -conf
	        - /etc/coredns/Corefile
	        image: k8s.gcr.io/coredns:1.3.1
	        imagePullPolicy: IfNotPresent
	        livenessProbe:
	          failureThreshold: 5
	          httpGet:
	            path: /health
	            port: 8080
	            scheme: HTTP
	          initialDelaySeconds: 60
	          successThreshold: 1
	          timeoutSeconds: 5
	        name: coredns
	        ports:
	        - containerPort: 53
	          name: dns
	          protocol: UDP
	        - containerPort: 53
	          name: dns-tcp
	          protocol: TCP
	        - containerPort: 9153
	          name: metrics
	          protocol: TCP
	        readinessProbe:
	          httpGet:
	            path: /health
	            port: 8080
	            scheme: HTTP
	        resources:
	          limits:
	            memory: 170Mi
	          requests:
	            cpu: 100m
	            memory: 70Mi
	        securityContext:
	          allowPrivilegeEscalation: false
	          capabilities:
	            add:
	            - NET_BIND_SERVICE
	            drop:
	            - all
	          readOnlyRootFilesystem: true
	        volumeMounts:
	        - mountPath: /etc/coredns
	          name: config-volume
	          readOnly: true
	      dnsPolicy: Default
	      nodeSelector:
	        beta.kubernetes.io/os: linux
	      priorityClassName: system-cluster-critical
	      serviceAccountName: coredns
	      tolerations:
	      - key: CriticalAddonsOnly
	        operator: Exists
	      - effect: NoSchedule
	        key: node-role.kubernetes.io/master
	      volumes:
	      - configMap:
	          items:
	          - key: Corefile
	            path: Corefile
	          name: coredns
	        name: config-volume
	status: {}
[dryrun] Would perform action CREATE on resource "services" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	kind: Service
	metadata:
	  annotations:
	    prometheus.io/port: "9153"
	    prometheus.io/scrape: "true"
	  creationTimestamp: null
	  labels:
	    k8s-app: kube-dns
	    kubernetes.io/cluster-service: "true"
	    kubernetes.io/name: KubeDNS
	  name: kube-dns
	  namespace: kube-system
	  resourceVersion: "0"
	spec:
	  clusterIP: 10.96.0.10
	  ports:
	  - name: dns
	    port: 53
	    protocol: UDP
	    targetPort: 53
	  - name: dns-tcp
	    port: 53
	    protocol: TCP
	    targetPort: 53
	  - name: metrics
	    port: 9153
	    protocol: TCP
	    targetPort: 9153
	  selector:
	    k8s-app: kube-dns
	status:
	  loadBalancer: {}
[addons] Applied essential addon: CoreDNS
[dryrun] Would perform action CREATE on resource "serviceaccounts" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	kind: ServiceAccount
	metadata:
	  creationTimestamp: null
	  name: kube-proxy
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "configmaps" in API group "core/v1"
[dryrun] Attached object:
	apiVersion: v1
	data:
	  config.conf: |-
	    apiVersion: kubeproxy.config.k8s.io/v1alpha1
	    bindAddress: 0.0.0.0
	    clientConnection:
	      acceptContentTypes: ""
	      burst: 10
	      contentType: application/vnd.kubernetes.protobuf
	      kubeconfig: /var/lib/kube-proxy/kubeconfig.conf
	      qps: 5
	    clusterCIDR: ""
	    configSyncPeriod: 15m0s
	    conntrack:
	      max: null
	      maxPerCore: 32768
	      min: 131072
	      tcpCloseWaitTimeout: 1h0m0s
	      tcpEstablishedTimeout: 24h0m0s
	    enableProfiling: false
	    healthzBindAddress: 0.0.0.0:10256
	    hostnameOverride: ""
	    iptables:
	      masqueradeAll: false
	      masqueradeBit: 14
	      minSyncPeriod: 0s
	      syncPeriod: 30s
	    ipvs:
	      excludeCIDRs: null
	      minSyncPeriod: 0s
	      scheduler: ""
	      strictARP: false
	      syncPeriod: 30s
	    kind: KubeProxyConfiguration
	    metricsBindAddress: 127.0.0.1:10249
	    mode: ""
	    nodePortAddresses: null
	    oomScoreAdj: -999
	    portRange: ""
	    resourceContainer: /kube-proxy
	    udpIdleTimeout: 250ms
	    winkernel:
	      enableDSR: false
	      networkName: ""
	      sourceVip: ""
	  kubeconfig.conf: |-
	    apiVersion: v1
	    kind: Config
	    clusters:
	    - cluster:
	        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
	        server: https://10.0.8.10:6443
	      name: default
	    contexts:
	    - context:
	        cluster: default
	        namespace: default
	        user: default
	      name: default
	    current-context: default
	    users:
	    - name: default
	      user:
	        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
	kind: ConfigMap
	metadata:
	  creationTimestamp: null
	  labels:
	    app: kube-proxy
	  name: kube-proxy
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "daemonsets" in API group "apps/v1"
[dryrun] Attached object:
	apiVersion: apps/v1
	kind: DaemonSet
	metadata:
	  creationTimestamp: null
	  labels:
	    k8s-app: kube-proxy
	  name: kube-proxy
	  namespace: kube-system
	spec:
	  selector:
	    matchLabels:
	      k8s-app: kube-proxy
	  template:
	    metadata:
	      creationTimestamp: null
	      labels:
	        k8s-app: kube-proxy
	    spec:
	      containers:
	      - command:
	        - /usr/local/bin/kube-proxy
	        - --config=/var/lib/kube-proxy/config.conf
	        - --hostname-override=$(NODE_NAME)
	        env:
	        - name: NODE_NAME
	          valueFrom:
	            fieldRef:
	              fieldPath: spec.nodeName
	        image: k8s.gcr.io/kube-proxy:v1.14.5
	        imagePullPolicy: IfNotPresent
	        name: kube-proxy
	        resources: {}
	        securityContext:
	          privileged: true
	        volumeMounts:
	        - mountPath: /var/lib/kube-proxy
	          name: kube-proxy
	        - mountPath: /run/xtables.lock
	          name: xtables-lock
	        - mountPath: /lib/modules
	          name: lib-modules
	          readOnly: true
	      hostNetwork: true
	      priorityClassName: system-node-critical
	      serviceAccountName: kube-proxy
	      tolerations:
	      - key: CriticalAddonsOnly
	        operator: Exists
	      - operator: Exists
	      volumes:
	      - configMap:
	          name: kube-proxy
	        name: kube-proxy
	      - hostPath:
	          path: /run/xtables.lock
	          type: FileOrCreate
	        name: xtables-lock
	      - hostPath:
	          path: /lib/modules
	        name: lib-modules
	  updateStrategy:
	    type: RollingUpdate
	status:
	  currentNumberScheduled: 0
	  desiredNumberScheduled: 0
	  numberMisscheduled: 0
	  numberReady: 0
[dryrun] Would perform action CREATE on resource "clusterrolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRoleBinding
	metadata:
	  creationTimestamp: null
	  name: kubeadm:node-proxier
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: ClusterRole
	  name: system:node-proxier
	subjects:
	- kind: ServiceAccount
	  name: kube-proxy
	  namespace: kube-system
[dryrun] Would perform action CREATE on resource "roles" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: Role
	metadata:
	  creationTimestamp: null
	  name: kube-proxy
	  namespace: kube-system
	rules:
	- apiGroups:
	  - ""
	  resourceNames:
	  - kube-proxy
	  resources:
	  - configmaps
	  verbs:
	  - get
[dryrun] Would perform action CREATE on resource "rolebindings" in API group "rbac.authorization.k8s.io/v1"
[dryrun] Attached object:
	apiVersion: rbac.authorization.k8s.io/v1
	kind: RoleBinding
	metadata:
	  creationTimestamp: null
	  name: kube-proxy
	  namespace: kube-system
	roleRef:
	  apiGroup: rbac.authorization.k8s.io
	  kind: Role
	  name: kube-proxy
	subjects:
	- kind: Group
	  name: system:bootstrappers:kubeadm:default-node-token
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /tmp/kubeadm-init-dryrun301362558/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.8.10:6443 --token krzl1u.yf9w1olz2hqas0t6 \
    --discovery-token-ca-cert-hash sha256:9376124368d434849c42a3897321277b0f00151154b25302f8a75a685b417616 
